#2.

#!/bin/bash

if [ -d "$1" ]; then
    echo "$1 is a directory"
elif [ -f "$1" ]; then
    echo "$1 is a file"
else
    echo "$1 is something else"
fi


#3.

#!/bin/bash
echo "Enter the pattern:"
read pattern
echo "Enter the filename:"
read file
grep "$pattern" "$file"

#4

#!/bin/bash
for file in "$@"
do
    if [ -f "$file" ]; then
        tr 'a-z' 'A-Z' < "$file" > temp && mv temp "$file"
    else
        echo "$file not found"
    fi
done


#5

#!/bin/bash
echo "Deleting temporary files..."
rm -f *.tmp *~
echo "Done."


#6

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid;
    pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    } else if (pid == 0) {
        printf("Child process (PID: %d)\n", getpid());
        execlp("ls", "ls", "-l", NULL);
        perror("exec failed");
        exit(1);
    } else {
        printf("Parent process (PID: %d), Child PID: %d\n", getpid(), pid);
    }

    return 0;
}

#7

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    char buffer[100];
    ssize_t bytesRead;

    fd = open("input.txt", O_RDONLY);
    if (fd < 0) {
        perror("open failed");
        exit(1);
    }

    bytesRead = read(fd, buffer, sizeof(buffer));
    if (bytesRead < 0) {
        perror("read failed");
        close(fd);
        exit(1);
    }

    write(STDOUT_FILENO, buffer, bytesRead);
    close(fd);
    return 0;
}


#8

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

void handle_signal(int sig) {
    printf("\nCaught signal %d (Ctrl+C). Exiting safely.\n", sig);
    exit(0);
}

int main() {
    signal(SIGINT, handle_signal);
    printf("Press Ctrl+C to trigger SIGINT...\n");
    while (1) {
        printf("Running...\n");
        sleep(1);
    }
    return 0;
}


#9

#!/bin/bash
echo "Enter Process ID (PID):"
read pid
if [ ! -d "/proc/$pid" ]; then
    echo "Process with PID $pid does not exist."
    exit 1
fi
echo "Process attributes for PID $pid:"
cat "/proc/$pid/status"


#10

#!/bin/bash
echo "Currently logged in users:"
whoami

#11

#include <stdio.h>
#include <pthread.h>
int counter = 0;
void* increment(void* arg) {
    for (int i = 0; i < 1000000; i++) {
        counter++;
    }
    return NULL;
}
int main() {
    pthread_t t1, t2;
    pthread_create(&t1, NULL, increment, NULL);
    pthread_create(&t2, NULL, increment, NULL);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    printf("Final counter value: %d\n", counter);
    return 0;
}


#12

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
int main() {
    int fd[2];
    pid_t pid;
    char write_msg[] = "Hello from writer!";
    char read_msg[100];
    if (pipe(fd) == -1) {
        perror("Pipe failed");
        exit(1);
    }
    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        close(fd[1]);
        read(fd[0], read_msg, sizeof(read_msg));
        printf("Reader received: %s\n", read_msg);
        close(fd[0]);
    } else {
        close(fd[0]);
        write(fd[1], write_msg, strlen(write_msg) + 1);
        close(fd[1]);
    }
    return 0;
}


#13

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
int main() {
    int fd[2];
    pid_t pid;
    char write_msg[] = "Message through pipe!";
    char read_msg[100];
    if (pipe(fd) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }
    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        close(fd[1]);
        read(fd[0], read_msg, sizeof(read_msg));
        printf("Child received: %s\n", read_msg);
        close(fd[0]);
    } else {
        close(fd[0]);
        write(fd[1], write_msg, strlen(write_msg) + 1);
        close(fd[1]);
    }
    return 0;
}
